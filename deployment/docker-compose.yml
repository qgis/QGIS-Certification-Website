#
# Production server with UWSGI configured to run on port 8080
# and web configured to run directly on port 80
#
# docker-compose build
# docker-compose up -d web
#
# See accompanying Make commands for easy collectstatic etc.
volumes:
  postgres-data:
  db-backups:
  static-data:
  media-data:
  reports-data:
  nginx-conf:
services:

  db:
    image: kartoza/postgis:16-3.4
    volumes:
      - postgres-data:/var/lib/postgresql
      - db-backups:/backups
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASS=${DATABASE_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0
    restart: unless-stopped
    ports:
      - "7543:5432"
    networks:
      internal:

  uwsgi: &uwsgi-common
    image: ${UWSGI_DOCKER_IMAGE}
    build:
      context: ${PWD}/../
      dockerfile: deployment/docker/Dockerfile
      target: prod
    expose:
      - "8080"
    environment:
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - VIRTUAL_PORT=${VIRTUAL_PORT}
      - VALID_DOMAIN=${VALID_DOMAIN}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-automation}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_SUBJECT_PREFIX=${EMAIL_SUBJECT_PREFIX}
      - MAILDOMAIN=${MAILDOMAIN}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - STRIPE_LIVE_SECRET_KEY=${STRIPE_LIVE_SECRET_KEY}
      - STRIPE_LIVE_PUBLIC_KEY=${STRIPE_LIVE_PUBLIC_KEY}
      - STRIPE_TEST_SECRET_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_TEST_PUBLIC_KEY=${STRIPE_TEST_PUBLIC_KEY}
      - STRIPE_LIVE_MODE=${STRIPE_LIVE_MODE}
      - DJSTRIPE_WEBHOOK_SECRET=${DJSTRIPE_WEBHOOK_SECRET}
      - SERVER_EMAIL=${SERVER_EMAIL}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_RATE=${SENTRY_RATE}
      - PAYREXX_INSTANCE=${PAYREXX_INSTANCE}
      - PAYREXX_API_SECRET=${PAYREXX_API_SECRET}
    volumes:
      - static-data:/home/web/static:rw
      - media-data:/home/web/media:rw
      - reports-data:/home/web/reports
      - ./docker/uwsgi.conf:/uwsgi.conf
    command: bash -c "npm install && npm run build && uwsgi --ini /uwsgi.conf"
    links:
      - db:db
      # - smtp:smtp
    restart: unless-stopped
    user: root
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    networks:
      internal:

  dbbackups:
    image: kartoza/pg-backup:16-3.4
    hostname: pg-backups
    volumes:
      - db-backups:/backups
    links:
      - db:db
    environment:
      # take care to let the project name below match that
      # declared in the top of the makefile
      - DUMPPREFIX=${DUMPPREFIX}
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASS=${DATABASE_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=${DATABASE_HOST}
      - PGDATABASE=${DATABASE_NAME}
    restart: unless-stopped
    networks:
      internal:

  # This is normally the main entry point for a production server
  web:
    image: nginx
    entrypoint:
    - /etc/nginx/sites-available/docker-entrypoint.sh
    ports:
    - "80:80"
    - "443:443"
    command:
    - ${WEB_ENV}
    volumes:
      - nginx-conf:/etc/nginx/sites-available/:ro
      - static-data:/home/web/static:ro
      - media-data:/home/web/media:ro
      - ./webroot:/var/www/webroot
      - ./certbot-etc:/etc/letsencrypt
    links:
      - uwsgi:uwsgi
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    networks:
      internal:

  # This is the entry point for a development server.
  # Run with --no-deps to run attached to the services
  # from prod environment if wanted
  devweb:
    <<: *uwsgi-common
    build:
      context: ${PWD}/../
      dockerfile: deployment/docker/Dockerfile
      target: dev
    ports:
      - "62202:8000"
    networks:
      internal:

  webpack:
    build:
      context: ${PWD}/../
      dockerfile: deployment/docker/Dockerfile
      target: dev
    working_dir: /home/web/django_project
    command: npm start
    volumes:
      - ../django_project:/home/web/django_project
      - static-data:/home/web/static:rw
      - ${MEDIA_VOLUME}:/home/web/media:rw
    networks:
      internal:

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./webroot:/var/www/webroot
      - ./certbot-etc:/etc/letsencrypt
    depends_on:
      - web
    command: certonly --webroot --webroot-path=/var/www/webroot --email admin@qgis.org --agree-tos --no-eff-email --force-renewal -d ${VIRTUAL_HOST:-certification.qgis.org}
    networks:
      internal:


networks:
    internal: